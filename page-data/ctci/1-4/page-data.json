{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-jsx","path":"/ctci/1-4/","result":{"data":{"markdownRemark":{"html":"<h2>회문 순열이란?</h2>\n<p>어떤 문자열이 주어질때, 문자열을 이루는 글자들의 순서를 바꾸어서 회문(palindrome)을 만들 수 있다면, 이 문자열을 회문 순열이라고 한다. 예를 들어, \"aabbc\" 와 같은 경우는 순서를 바꿔서 \"bacab\" 와 같은 회문으로 만들 수 있으므로 회문순열이 될 수 있다. .</p>\n<h2>어떤 문자열이 회문 순열에 속하는지 알아내는 법</h2>\n<p>어떤 문자열이 회문인지 판단하기 위해서, 글자 순서를 바꾼 모든 문자열을 만드는 방법도 있다. 모든 경우의 수를 만들어 놓고 그 중에 회문이 있는지를 검사하는 것이다. 이 경우 로직은 이해하기 쉽고 단순하겠지만, 계산상의 부담이 있을 수 있고 따라서 자원의 비효율적 소모라는 문제도 있을 수 있다.</p>\n<h3>특징을 정의</h3>\n<p>모든 경우에서 만족하는 어떤 <code>특징</code>을 정의하고, 어떤 문자열이 이 <code>특징</code>을 갖고 있다는 것을 검사하는 방법도 있다. 이런 아이디어는 <code>property based testing</code>에서도 찾아 볼 수 있다.</p>\n<h2>회문 순열의 특징</h2>\n<p>회문으로 바꾸었을때, 가운데 위치하는 글자와 그 이외 글자를 나누어서 생각해 볼 수 있다.</p>\n<h3>가운데 글자</h3>\n<p>문자열의 길이가 홀수 인 경우에, 가운데 글자가 존재한다. 가운데 글자가 존재한다면, 다음을 만족해야 한다.</p>\n<blockquote>\n<p>가운데 글자는 반드시 홀수 번 등장해야 한다.</p>\n</blockquote>\n<h3>나머지 글자</h3>\n<p>이외 글자는 다음 조건을 만족한다.</p>\n<blockquote>\n<p>같은 글자는 반드시 짝수 번 등장한다.</p>\n</blockquote>\n<p>전체 글자를 놓고 생각해본다면, 홀수 인 글자가 0 또는 1개 존재하고, 나머지 글자의 개수가 모두 짝수 인 경우에 회문순열이 된다고 볼 수 있다.</p>\n<h2>풀이 구상</h2>\n<p>기본적으로 주어진 문자열이 회문순열의 <code>특징</code>을 갖고 있는지 검사하는 방식으로 진행된다.</p>\n<blockquote>\n<ul>\n<li>문자의 등장 횟수를 센다. -> 짝수번 등장하는지 검사한다.</li>\n</ul>\n</blockquote>\n<ul>\n<li>등장 회수를 세는 수단은 해시 테이블이 있다.</li>\n<li>비트벡터를 이용해서 셀 수도 있다.</li>\n</ul>\n<p>각 글자의 등장 횟수를 세는 방식에서 차이점이 나타나는데, 정확한 등장 횟수를 원한다면 해시 테이블이 용이 하고, 구체적인 횟수보다 홀수 짝수 인지 여부만 중요한 경우에는 비트벡터를 활용할 수 있다. 비트벡터를 이용하면 결과물의 해상도가 떨어지는 대신 (구체적 횟수 -> 홀짝 여부) 보다 적은 공간을 활용해서 연산할 수 있다는 장점이 있다.</p>\n<h2>비트벡터를 이용한 풀이</h2>\n<h3>비트벡터의 테스트 작성</h3>\n<p>이번 문제에서는 특정 자리의 수를 반전 시키는 toggle 연산이 필요하다.</p>\n<pre><code class=\"language-java\">@Test\nvoid toggle() {\n    BitVector vector = new BitVector();\n\n    assertEquals(vector.get(2), 0);\n\n    vector.toggle(2);\n\n    assertEquals(vector.get(2), 1);\n\n    vector.toggle(2);\n\n    assertEquals(vector.get(2), 0);\n}\n\n</code></pre>\n<p>toggle 연산은 XOR 연산자를 이용하면 쉽게 할 수 있다.\nXOR 연산은 피연산자와 연산자가 다르면 1, 같으면 0을 반환한다.</p>\n<p>그렇기 때문에 연산자가 0 이라면 원래숫자를 그대로 유지하고,\n연산자가 1이라면, 원래의 숫자가 반전되는 특성이 있다.</p>\n<pre><code class=\"language-java\">public void toggle(int index) {\n    bits ^= (1 &#x3C;&#x3C; index);\n}\n</code></pre>\n<p>이것을 이용한 최종 풀이는 다음과 같다.</p>\n<pre><code class=\"language-java\">boolean isPalindromeAnagram(String word) {\n     BitVector bits = new BitVector();\n\n     for (char letter : word.toCharArray()) {\n         int index = letter - 'a';\n         bits.toggle(index);\n     }\n\n     return bits.sumOfDigits() &#x3C;= 1;\n }\n\n</code></pre>\n<h2>새롭게 알게된 것</h2>\n<h3>mask</h3>\n<p>다음과 같은 것을 mask 라고 부른다는 것을 관찰.\nmask와 &#x26; 연산을 하는 경우, 특정 자리의 값만 남고 나머지가 0이 되어 '가려지기' 때문인 것 같다.</p>\n<pre><code class=\"language-java\">int mask = 1 &#x3C;&#x3C; index;\n</code></pre>\n<blockquote>\n<p>Using a mask, multiple bits in a byte, nibble, word, etc. can be set either on or off, or inverted from on to off (or vice versa) in a single bitwise operation.</p>\n</blockquote>\n<p>mask 를 이용하면, 여러개의 비트를 일괄적으로 on/off 할 수 있다.</p>\n<blockquote>\n<p>More often in practice, bits are \"masked off\" (or masked to 0) than \"masked on\" (or masked to 1). When a bit is ANDed with a 0, the result is always 0, i.e. Y AND 0 = 0. To leave the other bits as they were originally, they can be ANDed with 1 as Y AND 1 = Y</p>\n</blockquote>\n<p>0 과 and 연산을 이용하면,  masked off 처리를 할 수 있다.</p>\n<h3>값이 1인 bit가 한번만 등장하는지 알아내는 방법</h3>\n<p>값이 1인 bit가 오직 한번만 등장하는 경우들의 예를 들어보자.</p>\n<pre><code>1\n10\n100\n1000\n10000\n100000\n</code></pre>\n<p>위의 숫자들에서 1을 빼보자.</p>\n<pre><code>0\n01\n011\n0111\n01111\n011111\n</code></pre>\n<p>원래 숫자와 <code>&#x26;</code> 연산을 하면, 값이 0이 되는 효과가 나타난다.</p>\n<h2>참고</h2>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Mask_(computing)\">https://en.wikipedia.org/wiki/Mask_(computing)</a></li>\n</ul>","frontmatter":{"slug":"/ctci/1-4","title":"회문 순열"}}},"pageContext":{"id":"641e0291-c7d7-5f65-8ad4-64c782f45fb0","frontmatter__slug":"/ctci/1-4","__params":{"frontmatter__slug":"ctci"}}},"staticQueryHashes":[]}