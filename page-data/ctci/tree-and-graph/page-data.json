{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-jsx","path":"/ctci/tree-and-graph/","result":{"data":{"markdownRemark":{"html":"<h2>주요 항목</h2>\n<ul>\n<li>이진 트리의 순회 방식</li>\n<li>최소힙 - 인터페이스와 그 구현\n<ul>\n<li>extract_min</li>\n<li>insert</li>\n</ul>\n</li>\n<li>트라이\n<ul>\n<li>트라이는 무엇</li>\n<li>종료 노드</li>\n</ul>\n</li>\n<li>그래프\n<ul>\n<li>그래프의 정의</li>\n<li>그래프의 표현 - 인접리스트, 인접행렬.</li>\n</ul>\n</li>\n<li>BFS/DFS\n<ul>\n<li>둘을 어느때에 써야하는지</li>\n<li>간단한 pseudo code 구현 참고</li>\n</ul>\n</li>\n<li>양방향 탐색\n<ul>\n<li>전통적인 BFS와 다른점.</li>\n</ul>\n</li>\n</ul>\n<h2>트리에 관해</h2>\n<ul>\n<li>binary search tree 같은 경우는 노드들이 규칙을 가지고 있음.</li>\n<li>탐색시간이 <code>log n</code>. 100억이라는 숫자도 log 값은 10인 것 처럼, 데이터 크기가 커질 수록 linear time과 log time의 편차가 매우 커짐을 알아야 함.</li>\n<li>정렬된 키를 가진 원소들을 담고 싶을 때 사용하게 됨.</li>\n</ul>","frontmatter":{"slug":"/ctci/tree-and-graph","title":"트리와 그래프"}}},"pageContext":{"id":"d698495b-001c-5c67-ab83-ade075a5b5bb","frontmatter__slug":"/ctci/tree-and-graph","__params":{"frontmatter__slug":"ctci"}}},"staticQueryHashes":["3957493746"]}