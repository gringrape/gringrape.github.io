{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-jsx","path":"/thread-process/","result":{"data":{"markdownRemark":{"html":"<ul>\n<li>\n<p>Thread를 사용하는 이유</p>\n<ul>\n<li>하나의 프로세스에서 여러개의 프로세서를 동시에 활용할수 있도록 하기 위해서. (병렬 실행해주기 위해서)</li>\n<li>프로세스의 작업들 중 I/O와 같은 blocking 작업을 다른 작업과 함께 실행해주기 위해서.</li>\n<li>작업들을 각각 독립적인 스레드에 할당하는 경우, I/O가 일어나는 작업들을 다른 작업들을 overlap 시키는 것이 가능해진다.</li>\n<li>병렬실행은 스레드를 이용하는 것 이외에 이벤트 기반으로 하는 방법도 있다.</li>\n</ul>\n</li>\n<li>\n<p>Thread와 Process의 차이</p>\n<ul>\n<li>Thread는 경량 프로세스라고 불릴 정도로 유사점이 많음.</li>\n<li>첫번째 차이점은 context swithching이 일어날때, Thread의 경우 address space가 바뀌지 않는 다는 점이다.</li>\n<li>두번째는 multi thread의 프로세스는 thread 마다 별도의 스택을 가진다는 점이다.</li>\n</ul>\n</li>\n</ul>\n<h2>참고</h2>\n<ul>\n<li>Operating Systems: Three Easy Pieces, Chapter 26 Concurrency, Chapter 33 Event based concurrency</li>\n</ul>","frontmatter":{"slug":"/thread-process","title":"Thread와 Process의 차이"}}},"pageContext":{"id":"3af39e04-ea26-5b56-93fc-f8b2041a1d2f","frontmatter__slug":"/thread-process","__params":{"frontmatter__slug":"thread-process"}}},"staticQueryHashes":[]}