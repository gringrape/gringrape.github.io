{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-jsx","path":"/password-hashing/","result":{"data":{"markdownRemark":{"html":"<h2>hash function</h2>\n<p>임의의 데이터를 고정된 크기의 값으로 매핑해주는 함수를 <code>hash function</code>이라고 한다.</p>\n<h3>Avalanche effect</h3>\n<p>해시 함수가 생성하는 값들이 균일하게 분포함을 검사하는 수단으로 <code>avalanche criterion</code>을 들 수 있다. <code>avalanche effect</code>에 대한 설명은 다음과 같다.</p>\n<blockquote>\n<p>if an input is changed slightly (for example, flipping a single bit), the output changes significantly (e.g., half the output bits flip). In the case of high-quality block ciphers, such a small change in either the key or the plaintext should cause a drastic change in the ciphertext.</p>\n</blockquote>\n<p>입력값이 아주 조금 변하는 경우에도 출력값에 많은 변화가 생기는 효과이다.</p>\n<h2>Password verification</h2>\n<p>데이터베이스에 사용자의 비밀번호를 그대로 저장하는 것은 위험하다. 비밀번호의 해시값만을 저장하는 것이 좋다. 인증시에는 사용자가 비밀번호를 입력하면 입력한 비밀번호의 해시를 계산한 후에 저장된 해시와 비교하는 프로세스를 거친다.</p>\n<blockquote>\n<p>One way to reduce this danger is to only store the hash digest of each password.\nTo authenticate a user, the password presented by the user is hashed and compared with the stored hash.</p>\n</blockquote>\n<h3>Slow hash vs Fast hash</h3>\n<p>비밀번호를 해시로 저장하는 경우에 저장된 해시값이 유출되는 경우가 있다. 만약 비밀번호 패턴이 한정적이고, 해시값 생성이 빠른 fast hash 를 사용한다면, <code>multiple core GPU</code>등을 통해 모든 조합을 테스트해보는 식으로 공격을 할 수 있다.</p>\n<p>NIST에서는 이러한 보안상의 위협을 방지하기 위해서 <code>Memory hard function</code>을 해시함수로 사용할 것을 권장하고 있다. <code>Memory hard function</code>을 사용하면 메모리 부하가 큰 해시 연산으로 인해서 반복적인 해시 연산을 매우 느리거나 불가능하게 만든다.(bcrypt, argon2, balloon 등도 이에 해당)</p>\n<h2>Argon2</h2>\n<p>Argon2 spec 문서에서의 소개를 보면, 배경을 짐작할 수 있다.</p>\n<blockquote>\n<p>In the meanwhile, the password crackers migrated to new architectures, such as FPGAs, multiple-core GPUs\nand dedicated ASIC modules, where the amortized cost of a multiple-iterated hash function is much lower. It\nwas quickly noted that these new environments are great when the computation is almost memoryless, but they\nexperience difficulties when operating on a large amount of memory. The defenders responded by designing\nmemory-hard functions, which require a large amount of memory to be computed, and impose computational\npenalties if less memory is used. The password hashing scheme scrypt [13] is an instance of such function.</p>\n</blockquote>\n<p>Argon2 는 memory-hard function 이다. 많은 양의 메모리를 사용하게 함으로써, GPU 공격에 대응할 수 있다.</p>\n<h2>참고</h2>\n<ul>\n<li>해시 함수 - <a href=\"https://en.wikipedia.org/wiki/Cryptographic_hash_function\">https://en.wikipedia.org/wiki/Cryptographic_hash_function</a></li>\n<li>avalanhe effect - <a href=\"https://en.wikipedia.org/wiki/Avalanche_effect\">https://en.wikipedia.org/wiki/Avalanche_effect</a></li>\n<li>crypto graphic salt - <a href=\"https://en.wikipedia.org/wiki/Salt_(cryptography)\">https://en.wikipedia.org/wiki/Salt_(cryptography)</a></li>\n<li>NIST - <a href=\"https://en.wikipedia.org/wiki/National_Institute_of_Standards_and_Technology\">https://en.wikipedia.org/wiki/National_Institute_of_Standards_and_Technology</a></li>\n<li>Argon2 specification - <a href=\"https://www.password-hashing.net/argon2-specs.pdf\">https://www.password-hashing.net/argon2-specs.pdf</a></li>\n</ul>","frontmatter":{"slug":"/password-hashing","title":"비밀번호 해싱 알고리즘"}}},"pageContext":{"id":"0cf2c55f-f463-56aa-a9e1-35bbc8ef7e43","frontmatter__slug":"/password-hashing","__params":{"frontmatter__slug":"password-hashing"}}},"staticQueryHashes":[]}