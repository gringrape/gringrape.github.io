{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-jsx","path":"/password-hashing/","result":{"data":{"markdownRemark":{"html":"<h2>hash function</h2>\n<ul>\n<li>메시지를 해시 값으로 매핑해주는 함수.</li>\n<li>단방향\n<ul>\n<li>해시에 해당하는 메시지를 알기 위해서는 brute force 방식을 활용.</li>\n<li>Rainbow table 활용 -> 채굴과의 연관성 조사!</li>\n</ul>\n</li>\n<li>결정적, 같은 데이터라면 언제나 같은 반환값.</li>\n<li>데이터에 조그마한 변화가 해시값을 크게 변화시켜야 함. 데이터와 해시값 사이의 연관관계를 추적할 수 없도록. (avalanche effect)</li>\n</ul>\n<h3>avalanche effect</h3>\n<blockquote>\n<p>if an input is changed slightly (for example, flipping a single bit), the output changes significantly (e.g., half the output bits flip). In the case of high-quality block ciphers, such a small change in either the key or the plaintext should cause a drastic change in the ciphertext.</p>\n</blockquote>\n<h2>Password verification</h2>\n<p>비밀번호를 그대로 저장하는 것은 위험. 비밀번호의 해시값만을 저장하고, 사용자가 비밀번호를 입력하면, 입력한 비밀번호의 해시를 저장된 해시와 비교해서 인증.</p>\n<blockquote>\n<p>One way to reduce this danger is to only store the hash digest of each password.\nTo authenticate a user, the password presented by the user is hashed and compared with the stored hash.</p>\n</blockquote>\n<h3>보안 위험</h3>\n<p>비밀번호를 해시로 저장하는 경우, 데이터베이스가 도난당해도 단지 해시값만 유출될 뿐이다. 하지만 비밀번호를 생성하는 패턴의 수가 한정적이고, 해시값 생성이 빠른 fast hash 를 사용한다면, 모든 조합을 테스트해보는 식으로 공격을 할 수 있다.</p>\n<p>cryptographic salt를 이용한다면 몇몇의 공격을 방어할 수 있다. 하지만, 그래픽카드를 이용하면, 초당 1000억회의 연산이 가능하므로, 취약할 수 있다. NIST에서는 brute force 연산을 느리게 만들 수 있는 해시 함수를 사용할 것을 권장한다. (bcrypt, argon2, balloon 등도 이에 해당)</p>\n<h2>Argon2</h2>\n<p>Argon2 spec 문서에서의 소개를 보면, 배경을 짐작할 수 있다.<br>\n<a href=\"https://www.password-hashing.net/argon2-specs.pdf\">https://www.password-hashing.net/argon2-specs.pdf</a></p>\n<blockquote>\n<p>In the meanwhile, the password crackers migrated to new architectures, such as FPGAs, multiple-core GPUs\nand dedicated ASIC modules, where the amortized cost of a multiple-iterated hash function is much lower. It\nwas quickly noted that these new environments are great when the computation is almost memoryless, but they\nexperience difficulties when operating on a large amount of memory. The defenders responded by designing\nmemory-hard functions, which require a large amount of memory to be computed, and impose computational\npenalties if less memory is used. The password hashing scheme scrypt [13] is an instance of such function.</p>\n</blockquote>\n<p>Argon2 는 memory-hard function 이다. 많은 양의 메모리를 사용하게 함으로써, GPU 공격에 대응할 수 있다.</p>\n<h2>참고</h2>\n<ul>\n<li>해시 함수 - <a href=\"https://en.wikipedia.org/wiki/Cryptographic_hash_function\">https://en.wikipedia.org/wiki/Cryptographic_hash_function</a></li>\n<li>avalanhe effect - <a href=\"https://en.wikipedia.org/wiki/Avalanche_effect\">https://en.wikipedia.org/wiki/Avalanche_effect</a></li>\n<li>crypto graphic salt - <a href=\"https://en.wikipedia.org/wiki/Salt_(cryptography)\">https://en.wikipedia.org/wiki/Salt_(cryptography)</a></li>\n<li>NIST - <a href=\"https://en.wikipedia.org/wiki/National_Institute_of_Standards_and_Technology\">https://en.wikipedia.org/wiki/National_Institute_of_Standards_and_Technology</a></li>\n</ul>","frontmatter":{"slug":"/password-hashing","title":"비밀번호 해싱 알고리즘"}}},"pageContext":{"id":"bf564c23-f5f0-53be-b5be-a8bd077f34cb","frontmatter__slug":"/password-hashing","__params":{"frontmatter__slug":"password-hashing"}}},"staticQueryHashes":[]}