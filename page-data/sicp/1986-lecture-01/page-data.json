{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-jsx","path":"/sicp/1986-lecture-01/","result":{"data":{"markdownRemark":{"html":"<h1>주제</h1>\n<ul>\n<li>이 강의에서 배우는 것 - computer science? -> procedure</li>\n<li>복잡성을 다루는 기술</li>\n<li>컴퓨터 언어를 이해하는 프레임워크</li>\n<li>Lisp 언어의 기본</li>\n<li>재귀적 정의 - SQRT</li>\n</ul>\n<h2>이 강의에서 배우는 것</h2>\n<h3>Computer에 관한 것이 아니다</h3>\n<p>물리학이 곧 입자가속기가 아니 듯이.<br>\n화학이 곧 피펫이나 비커가 아니 듯이.</p>\n<p>배워야 할 것도 도구 그 자체라고 할 수 없다.</p>\n<h2>복잡성을 다루는 기술</h2>\n<p>복잡한 절차들을 어떻게 다룰 것인가?</p>\n<h3>black box</h3>\n<p>내부작용을 몰라도 사용할 수 있다.</p>\n<h3>conventional interface</h3>\n<p>외부와 효과적으로 상호작용할 수 있는 인터페이스를 만든다.</p>\n<h3>metalinguistic ~~</h3>\n<p>DSL과 같은 언어 요소를 정의한다. (잘 이해했는지 추가적으로 조사)</p>\n<h2>컴퓨터 언어를 이해하는 프레임워크</h2>\n<h3>Primitive element</h3>\n<p>가장 기본이 되는 요소가 무엇인지 파악한다.</p>\n<h3>Means of Combination</h3>\n<p>기본이 되는 요소들을 어떻게 조합할 수 있는지 파악한다.</p>\n<h3>Means of Abstraction</h3>\n<p>combination 들을 어떻게 추상화해서 복잡한 것을 표현할 수 있는지 파악한다.</p>\n<h2>Lisp 언어의 기본</h2>\n<h3>Combination</h3>\n<ul>\n<li>(* 5 5) -> parenthesis, operator, operands</li>\n</ul>\n<h3>Abstraction</h3>\n<ul>\n<li>(DEFINE A (* 5 5))</li>\n</ul>\n<h3>Abstraction of procedure</h3>\n<ul>\n<li>(DEFINE (times5 x) (* 5 x))</li>\n</ul>\n<h2>재귀적 정의</h2>\n<p><code>for</code> 와 <code>while</code> 같이 반복을 처리하는 도구가 없어도 될까?<br>\n그런 도구들이 필수적이지는 않다. 그리고 이 강의에서는 사용하지 않을 예정이다.</p>\n<p>SQRT 를 구하는 과정의 예를 들어보자.</p>\n<ul>\n<li>추측값을 정한다.</li>\n<li>추측이 충분히 정확한 경우, 값을 반환한다.</li>\n<li>추측이 충분히 정확하지 않은 경우-> 추측을 개선한다.\n<ul>\n<li>값을 추측값으로 나눈다.</li>\n<li>추측값과 위의 값의 평균을 새로운 추측으로 사용한다. (그림을 그려서 수렴하는지 확인하자.)</li>\n</ul>\n</li>\n</ul>","frontmatter":{"slug":"/sicp/1986-lecture-01","title":"Overview and introduction to Lisp"}}},"pageContext":{"id":"a7546d61-c62a-5a71-b939-2757ab8231ec","frontmatter__slug":"/sicp/1986-lecture-01","__params":{"frontmatter__slug":"sicp"}}},"staticQueryHashes":[]}