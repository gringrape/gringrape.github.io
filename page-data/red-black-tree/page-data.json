{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-jsx","path":"/red-black-tree/","result":{"data":{"markdownRemark":{"html":"<ul>\n<li>Re-balancing\n<ul>\n<li>각 노드는 색깔에 해당하는 자료를 가지고 있고, 이것이 balanced를 확보하는데 쓰임.</li>\n<li>Re-balancing으로 인해서 탐색시간이 상수 인 것이 보장됨.</li>\n</ul>\n</li>\n<li>활용\n<ul>\n<li>Java HashMap에서 bucket의 원소가 일정 개수 이상일때의 자료구조 형식. 이 자료구조를 쓰는 이유는 반복적인 삽입에도 탐색시간을 log로 유지하기 위함.</li>\n</ul>\n</li>\n</ul>\n<h2>참고</h2>\n<ul>\n<li>Red-black tree - <a href=\"https://en.wikipedia.org/wiki/Red%E2%80%93black_tree\">https://en.wikipedia.org/wiki/Red%E2%80%93black_tree</a></li>\n<li>Self balancing binary search tree - <a href=\"https://en.wikipedia.org/wiki/Self-balancing_binary_search_tree\">https://en.wikipedia.org/wiki/Self-balancing_binary_search_tree</a></li>\n</ul>","frontmatter":{"slug":"/red-black-tree","title":"Red-black tree에 대해 알아보자"}}},"pageContext":{"id":"6cc3d155-1637-5e60-9ef9-7137ca5b9c73","frontmatter__slug":"/red-black-tree","__params":{"frontmatter__slug":"red-black-tree"}}},"staticQueryHashes":["3957493746"]}